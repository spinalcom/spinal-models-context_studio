"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Utilities = require("./Utilities");

const spinalCore = require("spinal-core-connectorjs");
const globalType = typeof window === "undefined" ? global : window;

/**
 *
 *
 * @class SpinalLog
 * @extends {Model}
 */
class SpinalLog extends globalType.Model {
  constructor(endpointName, type, user, message, endpointNode, value) {
    super();
    this.add_attr({
      id: _Utilities.Utilities.guid(type),
      name: endpointName,
      type: (() => {
        if (type == "min") return "SpinalThresholdMin";
        return "SpinalThresholdMax";
      })(),
      date_begin: Date.now(),
      date_end: Date.now(),
      user: user,
      message: message,
      value: value,
      endpoint: new Ptr(endpointNode)

    });
  }
}

exports.default = SpinalLog;

spinalCore.register_models([SpinalLog]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TcGluYWxMb2cuanMiXSwibmFtZXMiOlsic3BpbmFsQ29yZSIsInJlcXVpcmUiLCJnbG9iYWxUeXBlIiwid2luZG93IiwiZ2xvYmFsIiwiU3BpbmFsTG9nIiwiTW9kZWwiLCJjb25zdHJ1Y3RvciIsImVuZHBvaW50TmFtZSIsInR5cGUiLCJ1c2VyIiwibWVzc2FnZSIsImVuZHBvaW50Tm9kZSIsInZhbHVlIiwiYWRkX2F0dHIiLCJpZCIsIlV0aWxpdGllcyIsImd1aWQiLCJuYW1lIiwiZGF0ZV9iZWdpbiIsIkRhdGUiLCJub3ciLCJkYXRlX2VuZCIsImVuZHBvaW50IiwiUHRyIiwicmVnaXN0ZXJfbW9kZWxzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQTs7QUFGQSxNQUFNQSxhQUFhQyxRQUFRLHlCQUFSLENBQW5CO0FBQ0EsTUFBTUMsYUFBYSxPQUFPQyxNQUFQLEtBQWtCLFdBQWxCLEdBQWdDQyxNQUFoQyxHQUF5Q0QsTUFBNUQ7O0FBSUE7Ozs7OztBQU1BLE1BQU1FLFNBQU4sU0FBd0JILFdBQVdJLEtBQW5DLENBQXlDO0FBQ3ZDQyxjQUFZQyxZQUFaLEVBQTBCQyxJQUExQixFQUFnQ0MsSUFBaEMsRUFBc0NDLE9BQXRDLEVBQStDQyxZQUEvQyxFQUE2REMsS0FBN0QsRUFBb0U7QUFDbEU7QUFDQSxTQUFLQyxRQUFMLENBQWM7QUFDWkMsVUFBSUMscUJBQVVDLElBQVYsQ0FBZVIsSUFBZixDQURRO0FBRVpTLFlBQU1WLFlBRk07QUFHWkMsWUFBTSxDQUFDLE1BQU07QUFDWCxZQUFJQSxRQUFRLEtBQVosRUFDRSxPQUFPLG9CQUFQO0FBQ0YsZUFBTyxvQkFBUDtBQUNELE9BSkssR0FITTtBQVFaVSxrQkFBWUMsS0FBS0MsR0FBTCxFQVJBO0FBU1pDLGdCQUFVRixLQUFLQyxHQUFMLEVBVEU7QUFVWlgsWUFBTUEsSUFWTTtBQVdaQyxlQUFTQSxPQVhHO0FBWVpFLGFBQU9BLEtBWks7QUFhWlUsZ0JBQVUsSUFBSUMsR0FBSixDQUFRWixZQUFSOztBQWJFLEtBQWQ7QUFnQkQ7QUFuQnNDOztrQkFzQjFCUCxTOztBQUNmTCxXQUFXeUIsZUFBWCxDQUEyQixDQUFDcEIsU0FBRCxDQUEzQiIsImZpbGUiOiJTcGluYWxMb2cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBzcGluYWxDb3JlID0gcmVxdWlyZShcInNwaW5hbC1jb3JlLWNvbm5lY3RvcmpzXCIpO1xuY29uc3QgZ2xvYmFsVHlwZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB3aW5kb3c7XG5pbXBvcnQge1xuICBVdGlsaXRpZXNcbn0gZnJvbSBcIi4vVXRpbGl0aWVzXCI7XG4vKipcbiAqXG4gKlxuICogQGNsYXNzIFNwaW5hbExvZ1xuICogQGV4dGVuZHMge01vZGVsfVxuICovXG5jbGFzcyBTcGluYWxMb2cgZXh0ZW5kcyBnbG9iYWxUeXBlLk1vZGVsIHtcbiAgY29uc3RydWN0b3IoZW5kcG9pbnROYW1lLCB0eXBlLCB1c2VyLCBtZXNzYWdlLCBlbmRwb2ludE5vZGUsIHZhbHVlKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmFkZF9hdHRyKHtcbiAgICAgIGlkOiBVdGlsaXRpZXMuZ3VpZCh0eXBlKSxcbiAgICAgIG5hbWU6IGVuZHBvaW50TmFtZSxcbiAgICAgIHR5cGU6ICgoKSA9PiB7XG4gICAgICAgIGlmICh0eXBlID09IFwibWluXCIpXG4gICAgICAgICAgcmV0dXJuIFwiU3BpbmFsVGhyZXNob2xkTWluXCI7XG4gICAgICAgIHJldHVybiBcIlNwaW5hbFRocmVzaG9sZE1heFwiO1xuICAgICAgfSkoKSxcbiAgICAgIGRhdGVfYmVnaW46IERhdGUubm93KCksXG4gICAgICBkYXRlX2VuZDogRGF0ZS5ub3coKSxcbiAgICAgIHVzZXI6IHVzZXIsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW5kcG9pbnQ6IG5ldyBQdHIoZW5kcG9pbnROb2RlKVxuXG4gICAgfSlcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTcGluYWxMb2c7XG5zcGluYWxDb3JlLnJlZ2lzdGVyX21vZGVscyhbU3BpbmFsTG9nXSk7Il19